{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"deluge-cmd \u00b6 Some cli tools to manage Synthstrom Deluge SD card contents. Documentation: https://mupaduw.github.io/deluge-cmd GitHub: https://github.com/mupaduw/deluge-cmd PyPI: https://pypi.org/project/deluge-cmd/ Free software: MIT This project uses deluge-card which provides a python API for the Deluge Folder System. Features \u00b6 list Songs Samples, and Song Samples on a Deluge Folder System (DFS). check Deluge Folder Systems. list useful attributes tempo, key, scale. filter on path patterns: e.g. list all \"Kick\" samples). e.g. $> dls songs ~/Music/DELUGE/01 *001* Deluge filesystem at /homie/Music/DELUGE/01 mounted: False DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001.XML) key C major tempo 96.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001A.XML) key C major tempo 96.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001B.XML) key C major tempo 108.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001C.XML) key C major tempo 108.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001D.XML) key C major tempo 96.0 Experimental (backup first!) \u00b6 Move your samples, and update the songs that reference them which has some missing prime-time features $> dmv ~/Music/DELUGE/TEST/02 **/CR78* SAMPLES/ANOTHER_PLACE -vs ~/Music/DELUGE/TEST/02/SONGS/SONG002A.XML update song xml ~/Music/DELUGE/TEST/02/SONGS/SONG002.XML update song xml ... ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Closed hihat.wav move file ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Metal.wav move file moved 14 samples, in 9 songs Planned features \u00b6 (d)cp, and (d)rm commands. support for v4.0+ nested folders song groups (1, 1A, 1B, 1C). instruments, kits & synths. Credits \u00b6 This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Home"},{"location":"#deluge-cmd","text":"Some cli tools to manage Synthstrom Deluge SD card contents. Documentation: https://mupaduw.github.io/deluge-cmd GitHub: https://github.com/mupaduw/deluge-cmd PyPI: https://pypi.org/project/deluge-cmd/ Free software: MIT This project uses deluge-card which provides a python API for the Deluge Folder System.","title":"deluge-cmd"},{"location":"#features","text":"list Songs Samples, and Song Samples on a Deluge Folder System (DFS). check Deluge Folder Systems. list useful attributes tempo, key, scale. filter on path patterns: e.g. list all \"Kick\" samples). e.g. $> dls songs ~/Music/DELUGE/01 *001* Deluge filesystem at /homie/Music/DELUGE/01 mounted: False DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001.XML) key C major tempo 96.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001A.XML) key C major tempo 96.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001B.XML) key C major tempo 108.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001C.XML) key C major tempo 108.0 DelugeSong(/homie/Music/DELUGE/01/SONGS/SONG001D.XML) key C major tempo 96.0","title":"Features"},{"location":"#experimental-backup-first","text":"Move your samples, and update the songs that reference them which has some missing prime-time features $> dmv ~/Music/DELUGE/TEST/02 **/CR78* SAMPLES/ANOTHER_PLACE -vs ~/Music/DELUGE/TEST/02/SONGS/SONG002A.XML update song xml ~/Music/DELUGE/TEST/02/SONGS/SONG002.XML update song xml ... ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Closed hihat.wav move file ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Metal.wav move file moved 14 samples, in 9 songs","title":"Experimental (backup first!)"},{"location":"#planned-features","text":"(d)cp, and (d)rm commands. support for v4.0+ nested folders song groups (1, 1A, 1B, 1C). instruments, kits & synths.","title":"Planned features"},{"location":"#credits","text":"This package was created with Cookiecutter and the waynerv/cookiecutter-pypackage project template.","title":"Credits"},{"location":"changelog/","text":"All notable changes to this project will be documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . Unreleased \u00b6 [0.3.1] - 2022-05-12 \u00b6 Added \u00b6 fix for import error #7 some basic test cover Added \u00b6 [0.3.0] - 2022-05-12 \u00b6 Added \u00b6 new highly experimental dmv command Changed \u00b6 reordered dls args for easier auto-fill and compatability with new dmv and ls -p is now the pattern argument (non-optional) updated usage docs requires deluge-card 0.4.2 [0.2.0] - 2022-05-04 \u00b6 Changed \u00b6 command name changed to dls for deluge ls . removed cli script install. depends on deluge-card >= 0.3.0. sdu ~/SD01 -ls replaced by dls ~/SD01 s or songs sdu ~/SD01 -la replaced by dls ~/SD01 a or samples sdu ~/SD01 -lS replaced by dls ~/SD01 ss or song_samples updated README. Added \u00b6 -p , --pattern option for globby path filtering. eg dls ~/SD01 song_samples -p **/kick* -D , --debug option for debugging output. added TLDR style usage docs. [0.1.4] - 2022-05-02 \u00b6 Fixed \u00b6 Script entry point dsd . [0.1.3] - 2022-05-02 \u00b6 [0.1.2] - 2022-05-02 \u00b6 Changed \u00b6 Removed dev-requirements from the published package. Depends on deluge-card >= 0.2.3. Improved the Pypi classifiers. Added \u00b6 New script entry point dsd . [0.1.1] - 2022-05-01 \u00b6 First release on PyPI. Added \u00b6 basic list features in sdu.py module [0.1.0] - 2022-04-30 \u00b6","title":"Changelog"},{"location":"changelog/#unreleased","text":"","title":"Unreleased"},{"location":"changelog/#031---2022-05-12","text":"","title":"[0.3.1] - 2022-05-12"},{"location":"changelog/#added","text":"fix for import error #7 some basic test cover","title":"Added"},{"location":"changelog/#added_1","text":"","title":"Added"},{"location":"changelog/#030---2022-05-12","text":"","title":"[0.3.0] - 2022-05-12"},{"location":"changelog/#added_2","text":"new highly experimental dmv command","title":"Added"},{"location":"changelog/#changed","text":"reordered dls args for easier auto-fill and compatability with new dmv and ls -p is now the pattern argument (non-optional) updated usage docs requires deluge-card 0.4.2","title":"Changed"},{"location":"changelog/#020---2022-05-04","text":"","title":"[0.2.0] - 2022-05-04"},{"location":"changelog/#changed_1","text":"command name changed to dls for deluge ls . removed cli script install. depends on deluge-card >= 0.3.0. sdu ~/SD01 -ls replaced by dls ~/SD01 s or songs sdu ~/SD01 -la replaced by dls ~/SD01 a or samples sdu ~/SD01 -lS replaced by dls ~/SD01 ss or song_samples updated README.","title":"Changed"},{"location":"changelog/#added_3","text":"-p , --pattern option for globby path filtering. eg dls ~/SD01 song_samples -p **/kick* -D , --debug option for debugging output. added TLDR style usage docs.","title":"Added"},{"location":"changelog/#014---2022-05-02","text":"","title":"[0.1.4] - 2022-05-02"},{"location":"changelog/#fixed","text":"Script entry point dsd .","title":"Fixed"},{"location":"changelog/#013---2022-05-02","text":"","title":"[0.1.3] - 2022-05-02"},{"location":"changelog/#012---2022-05-02","text":"","title":"[0.1.2] - 2022-05-02"},{"location":"changelog/#changed_2","text":"Removed dev-requirements from the published package. Depends on deluge-card >= 0.2.3. Improved the Pypi classifiers.","title":"Changed"},{"location":"changelog/#added_4","text":"New script entry point dsd .","title":"Added"},{"location":"changelog/#011---2022-05-01","text":"First release on PyPI.","title":"[0.1.1] - 2022-05-01"},{"location":"changelog/#added_5","text":"basic list features in sdu.py module","title":"Added"},{"location":"changelog/#010---2022-04-30","text":"","title":"[0.1.0] - 2022-04-30"},{"location":"contributing/","text":"Contributing \u00b6 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways: Types of Contributions \u00b6 Report Bugs \u00b6 Report bugs at https://github.com/chrisbc/deluge-cmd/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug. Fix Bugs \u00b6 Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it. Implement Features \u00b6 Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it. Write Documentation \u00b6 deluge-cmd could always use more documentation, whether as part of the official deluge-cmd docs, in docstrings, or even on the web in blog posts, articles, and such. Submit Feedback \u00b6 The best way to send feedback is to file an issue at https://github.com/chrisbc/deluge-cmd/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :) Get Started! \u00b6 Ready to contribute? Here's how to set up deluge-cmd for local development. Fork the deluge-cmd repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/deluge-cmd.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox The flake8 linter will complain if your docstrings don't follow the google docstrings style . Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website. Pull Request Guidelines \u00b6 Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/chrisbc/deluge-cmd/actions and make sure that the tests pass for all supported Python versions. Tips \u00b6 $ poetry run pytest tests/test_deluge_cmd.py To run a subset of tests. Deploying \u00b6 A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. You can contribute in many ways:","title":"Contributing"},{"location":"contributing/#types-of-contributions","text":"","title":"Types of Contributions"},{"location":"contributing/#report-bugs","text":"Report bugs at https://github.com/chrisbc/deluge-cmd/issues. If you are reporting a bug, please include: Your operating system name and version. Any details about your local setup that might be helpful in troubleshooting. Detailed steps to reproduce the bug.","title":"Report Bugs"},{"location":"contributing/#fix-bugs","text":"Look through the GitHub issues for bugs. Anything tagged with \"bug\" and \"help wanted\" is open to whoever wants to implement it.","title":"Fix Bugs"},{"location":"contributing/#implement-features","text":"Look through the GitHub issues for features. Anything tagged with \"enhancement\" and \"help wanted\" is open to whoever wants to implement it.","title":"Implement Features"},{"location":"contributing/#write-documentation","text":"deluge-cmd could always use more documentation, whether as part of the official deluge-cmd docs, in docstrings, or even on the web in blog posts, articles, and such.","title":"Write Documentation"},{"location":"contributing/#submit-feedback","text":"The best way to send feedback is to file an issue at https://github.com/chrisbc/deluge-cmd/issues. If you are proposing a feature: Explain in detail how it would work. Keep the scope as narrow as possible, to make it easier to implement. Remember that this is a volunteer-driven project, and that contributions are welcome :)","title":"Submit Feedback"},{"location":"contributing/#get-started","text":"Ready to contribute? Here's how to set up deluge-cmd for local development. Fork the deluge-cmd repo on GitHub. Clone your fork locally $ git clone git@github.com:your_name_here/deluge-cmd.git Ensure poetry is installed. Install dependencies and start your virtualenv: $ poetry install -E test -E doc -E dev Create a branch for local development: $ git checkout -b name-of-your-bugfix-or-feature Now you can make your changes locally. When you're done making changes, check that your changes pass the tests, including testing other Python versions, with tox: $ poetry run tox The flake8 linter will complain if your docstrings don't follow the google docstrings style . Commit your changes and push your branch to GitHub: $ git add . $ git commit -m \"Your detailed description of your changes.\" $ git push origin name-of-your-bugfix-or-feature Submit a pull request through the GitHub website.","title":"Get Started!"},{"location":"contributing/#pull-request-guidelines","text":"Before you submit a pull request, check that it meets these guidelines: The pull request should include tests. If the pull request adds functionality, the docs should be updated. Put your new functionality into a function with a docstring, and add the feature to the list in README.md. The pull request should work for Python 3.6, 3.7, 3.8 and 3.9. Check https://github.com/chrisbc/deluge-cmd/actions and make sure that the tests pass for all supported Python versions.","title":"Pull Request Guidelines"},{"location":"contributing/#tips","text":"$ poetry run pytest tests/test_deluge_cmd.py To run a subset of tests.","title":"Tips"},{"location":"contributing/#deploying","text":"A reminder for the maintainers on how to deploy. Make sure all your changes are committed (including an entry in CHANGELOG.md). Then run: $ poetry run bump2version patch # possible: major / minor / patch $ git push $ git push --tags GitHub Actions will then deploy to PyPI if tests pass.","title":"Deploying"},{"location":"installation/","text":"Stable release \u00b6 To install deluge-cmd, run this command in your terminal: $ pip install deluge-cmd This is the preferred method to install deluge-cmd, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process. From source \u00b6 The source for deluge-cmd can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/mupaduw/deluge-cmd Or download the tarball : $ curl -OJL https://github.com/mupaduw/deluge-cmd/tarball/main Once you have a copy of the source, you can install it with: $ pip install .","title":"Installation"},{"location":"installation/#stable-release","text":"To install deluge-cmd, run this command in your terminal: $ pip install deluge-cmd This is the preferred method to install deluge-cmd, as it will always install the most recent stable release. If you don't have pip installed, this Python installation guide can guide you through the process.","title":"Stable release"},{"location":"installation/#from-source","text":"The source for deluge-cmd can be downloaded from the Github repo . You can either clone the public repository: $ git clone git://github.com/mupaduw/deluge-cmd Or download the tarball : $ curl -OJL https://github.com/mupaduw/deluge-cmd/tarball/main Once you have a copy of the source, you can install it with: $ pip install .","title":"From source"},{"location":"usage/","text":"Usage (TLDR) \u00b6 Installing deluge-cmd will make the following available on your system: dls - deluge list \u00b6 dls (aka deluge_dls.py ) lists objects such as Songs Samples, and SongSamples found on a Deluge Folder System (DFS). It's modelled after ls . Print some help : dls --help Print all the songs on a DFS: dls ~/Music/DELUGE/02 songs List songs where the path contains \"002\", \"003\" or \"004\" : dls songs ~/Music/DELUGE/02 songs -p *00[2-4]* List samples where the path contains folder \"/Kick/\" : dls s ~/Music/DELUGE/02 **/Kick/* List the song samples where the path contains folder \"Artists\" : dls song_samples ~/Music/DELUGE/02 **/Artists/* Find the CR78 samples dls samples ~/Music/DELUGE/TEST/02 **/CR78*.wav Deluge filesystem at ~/Music/DELUGE/TEST/02 mounted: False Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/Kick/CR78 Kick.wav'), settings=[]) Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/Rim/CR78 Rim.wav'), settings=[]) ... Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/HatC/CR78 Closed hihat.wav'), settings=[]) Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/ConH/CR78 Conga high.wav'), settings=[]) Deluge filesystem DelugeCardFS(card_root=PosixPath('~/Music/DELUGE/TEST/02')) has 14 samples dmv - deluge move \u00b6 dmv (aka deluge_dmv.py ) moves Song Samples, and updates references in SONG XML files on a Deluge Folder System (DFS). It's loosely modelled after mv . Important this is experimental and destructive! Please backup your data first. Currently SYNTH & KIT references are NOT updated. Print some help : dmv --help Move your CR78 samples, and update the songs that reference them : dmv ~/Music/DELUGE/TEST/02 **/CR78* SAMPLES/ANOTHER_PLACE -vs ~/Music/DELUGE/TEST/02/SONGS/SONG002A.XML update song xml ~/Music/DELUGE/TEST/02/SONGS/SONG002.XML update song xml ... ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Closed hihat.wav move file ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Metal.wav move file moved 14 samples, in 9 songs Future \u00b6 dcp - deluge copy \u00b6 Copy files and their references. drm - deluge remove \u00b6 Remove files, cleaning up references. About TLDR \u00b6 This page uses the TLDR format","title":"Usage"},{"location":"usage/#usage-tldr","text":"Installing deluge-cmd will make the following available on your system:","title":"Usage (TLDR)"},{"location":"usage/#dls---deluge-list","text":"dls (aka deluge_dls.py ) lists objects such as Songs Samples, and SongSamples found on a Deluge Folder System (DFS). It's modelled after ls . Print some help : dls --help Print all the songs on a DFS: dls ~/Music/DELUGE/02 songs List songs where the path contains \"002\", \"003\" or \"004\" : dls songs ~/Music/DELUGE/02 songs -p *00[2-4]* List samples where the path contains folder \"/Kick/\" : dls s ~/Music/DELUGE/02 **/Kick/* List the song samples where the path contains folder \"Artists\" : dls song_samples ~/Music/DELUGE/02 **/Artists/* Find the CR78 samples dls samples ~/Music/DELUGE/TEST/02 **/CR78*.wav Deluge filesystem at ~/Music/DELUGE/TEST/02 mounted: False Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/Kick/CR78 Kick.wav'), settings=[]) Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/Rim/CR78 Rim.wav'), settings=[]) ... Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/HatC/CR78 Closed hihat.wav'), settings=[]) Sample(path=PosixPath('~/Music/DELUGE/TEST/02/SAMPLES/DRUMS/ConH/CR78 Conga high.wav'), settings=[]) Deluge filesystem DelugeCardFS(card_root=PosixPath('~/Music/DELUGE/TEST/02')) has 14 samples","title":"dls - deluge list"},{"location":"usage/#dmv----deluge-move","text":"dmv (aka deluge_dmv.py ) moves Song Samples, and updates references in SONG XML files on a Deluge Folder System (DFS). It's loosely modelled after mv . Important this is experimental and destructive! Please backup your data first. Currently SYNTH & KIT references are NOT updated. Print some help : dmv --help Move your CR78 samples, and update the songs that reference them : dmv ~/Music/DELUGE/TEST/02 **/CR78* SAMPLES/ANOTHER_PLACE -vs ~/Music/DELUGE/TEST/02/SONGS/SONG002A.XML update song xml ~/Music/DELUGE/TEST/02/SONGS/SONG002.XML update song xml ... ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Closed hihat.wav move file ~/Music/DELUGE/TEST/02/SAMPLES/ANOTHER_PLACE/CR78 Metal.wav move file moved 14 samples, in 9 songs","title":"dmv  - deluge move"},{"location":"usage/#future","text":"","title":"Future"},{"location":"usage/#dcp---deluge-copy","text":"Copy files and their references.","title":"dcp - deluge copy"},{"location":"usage/#drm---deluge-remove","text":"Remove files, cleaning up references.","title":"drm - deluge remove"},{"location":"usage/#about-tldr","text":"This page uses the TLDR format","title":"About TLDR"}]}